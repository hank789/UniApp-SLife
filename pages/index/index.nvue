<template>
	<div>
		<!-- 侧边栏 -->
		<uni-drawer :showDrawer="isShowDrawer" @closeDrawer="handDrawerClose">
			<text style="font-size: 30px;">侧边栏</text>
		</uni-drawer>

		<uni-tabs @change="changeTab" :index="tabIndex">
			<!-- 顶部分类栏 -->
			<uni-tab-bar :drag="false" :tab-bars="tabBars" :tab-index="tabIndex" v-if="isShowTab"></uni-tab-bar>

			<uni-tab-content>
				<!-- 3个内容页,tabNum表示当前分类的序号 -->
				<list class="list" @loadmore="loadMore(tabNum)" show-scrollbar="false" loadmoreoffset="5" v-for="tabNum in tabNums"
				 :key="tabNum" @scroll="handScroll" offset-accuracy="50">

					<!-- 内容顶部下拉刷新组件 -->
					<refresh class="refresh" @refresh="onrefresh" @pullingdown="onpullingdown" :display="refreshing ? 'show' : 'hide'">
						<!-- <text class="refresh-text">{{refreshText}}</text> -->
						<loading-indicator class="indicator"></loading-indicator>
					</refresh>

					<!-- 顶部占位盒子,并显示刷新信息 -->
					<cell class="top-box">
						<text class="refresh-text">{{refreshText}}</text>
					</cell>

					<!-- 内容列表组件, homeList[tabNum]表示当前页的动态数据列表,这里的item就是每条动态数据, index表示这条动态数据的序号-->
					<cell v-for="(item,index) in homeList[tabNum]" :key="index" style="background-color: #eeeeee">
						<uni-media-list :itemData="item" @close="close(index)" @click="goDetail(item)"></uni-media-list>
					</cell>
					<!-- 底部加载更多组件 -->
					<cell class="loadmore">
						<text class="loadmore-text">{{loadingText}}</text>
					</cell>
				</list>
			</uni-tab-content>
		</uni-tabs>

		<!-- 悬浮的发布按钮 -->
		<div v-if="isShowButt">
			<image class="create-icon" src="../../static/news/create.png" @click="handCreateCilck"></image>
		</div>

	</div>
</template>

<script>
	import uniTabContent from './component/uni-tab-content/uni-tab-content.nvue'
	import uniTabBar from './component/uni-tab-bar/uni-tab-bar.nvue'
	import uniTabs from './component/uni-tabs/uni-tabs.nvue'
	import uniMediaList from './component/uni-media-list/uni-media-list.nvue'
	import uniDrawer from './component/uni-drawer/uni-drawer.nvue'

	import conf from '../../common/config.js'; //全局的一些配置信息
	import utils from '../../common/utils.js'; //一些工具方法

	const dom = weex.requireModule('dom')
	export default {
		components: {
			uniTabContent,
			uniTabBar,
			uniTabs,
			uniMediaList,
			uniDrawer
		},
		data() {
			return {
				isShowDrawer: false,
				refreshing: false,
				refreshText: "下拉可以刷新",
				loadingText: "加载更多中",
				isShowTab: true,
				isShowButt: true,
				scrollY: 0,

				tabNums: [0, 1, 2],
				tabIndex: 1,

				homeList: [], //用来存储首页的3个tab页list对象,

				listA: [], //最新页的list
				listAPage: 0, //最新页的当前Page数
				listATotalPage: 0, //最新页的总Page数

				listB: [], //推荐页的list
				listBPage: 0, //推荐页的当前Page数
				listBTotalPage: 0, //推荐页的总Page数

				listC: [], //热门页的list
				listCPage: 0, //热门页的当前Page数
				listCTotalPage: 0, //热门页的总Page数

				tabBars: [{
					name: '最新',
					id: 'tiyu'
				}, {
					name: '推荐',
					id: 'redian'
				}, {
					name: '热门',
					id: 'caijing'
				}]
			}
		},
		created() {
			var url = conf.serverUrl;
			console.log(url)
			var recommendList = [] //推荐页的数据
			//请求服务端数据
			uni.request({
				url: url + '/newsdata',
				success: (res) => {
					console.log("请求newsdata数据成功成功..")
					recommendList = res.data.newsList

					this.listB = this.listB.concat(recommendList)

					console.log(this.listB)
					this.homeList.push(this.listB)
					this.homeList.push(this.listB)
					this.homeList.push(this.listB)
				}
			})

			//监听导航栏的"三"或"O"的点击事件(展开/关闭侧边栏)
			uni.onNavigationBarButtonTap((e) => {
				console.log("监听到原生标题栏按钮点击事件");
				if (e.index == 0) {
					if (this.isShowDrawer == false) {
						this.isShowDrawer = true
						console.log("展开侧边栏")
					} else {
						this.isShowDrawer = false
						console.log("关闭侧边栏")
					}
				} else if (e.index == 1) {
					console.log("点击了重新定位按钮")
				} else {
					return;
				}

			})
		},
		mounted() {
		},
		updated() {
			this.setTabbarReddot();
		},
		methods: {
			//设置红点
			setTabbarReddot() {
				//延时获取uni的api,防止调用不到,设置红点
				setTimeout(() => {
					uni.showTabBarRedDot({
						index: 2,
					})
				}, 200)
			},

			//侧边栏的关闭事件函数
			handDrawerClose: function() {
				this.isShowDrawer = false
				console.log("点遮罩或关闭按钮-侧边栏关闭")
			},
			//点击了发布按钮
			handCreateCilck() {
				uni.navigateTo({
					url: '../create/create'
				});
			},
			goDetail(e) {
				//由于在APP端,getStorage取不到在nvue页面设置的js对象data,所以就转换为json保存
				var item = JSON.stringify(e)
				uni.setStorage({
					key: 'newsItem',
					data: item,
					success: function() {
						console.log('保存单条动态信息成功');
						uni.navigateTo({
							url: '/pages/newsDetail/newsDetail'
						});
					}
				});
			},
			loadMore(e) {
				setTimeout(() => {
					this.addData(e);
				}, 1000);
			},
			addData(e) {
				console.log("加载更多...");
			},
			async changeTab(e) {
				this.tabIndex = e.index;
			},
			getElSize(el) { //得到元素的size
				return new Promise((res, rej) => {
					const result = dom.getComponentRect(el, option => {
						res(option.size);
					})
				})
			},
			//添加拼接数据的方法
			addListData(list) {
				//console.log(list)
				let ary = []; //最外层数组对象,存放三个分类页的数据
				for (let i = 0, length = this.tabBars.length; i < length; i++) {
					//一个aryItem对象就是一个分类页
					let aryItem = {
						loadingText: "加载更多...",
						data: []
					};
					aryItem.data.push(list); //添加每一页的data数据
					ary.push(aryItem); //添加该页进ary数组
				}
				return ary;
			},
			onrefresh(event) {
				this.refreshText = "正在刷新...";
				this.refreshing = true;
				setTimeout(() => {
					console.log("刷新结束")
					this.refreshing = false
				}, 1000)
			},
			onpullingdown(event) {
				if (this.refreshing) {
					return;
				}
				if (Math.abs(event.pullingDistance) > Math.abs(event.viewHeight)) {
					this.refreshText = "释放立即刷新";
				} else {
					this.refreshText = "下拉可以刷新";
				}
			},
			//监听页面的滚动,判断滑动的位移差,如果是上滑,就隐藏分类栏
			handScroll(event) {
				let y = Math.abs(event.contentOffset.y); //获取当前滑动了多高
				let d = y - this.scrollY; //计算当前滑动与上次的位移差
				if (d > 0) {
					this.isShowTab = false //上滑隐藏分类栏
					this.scrollY = y
				} else {
					this.isShowTab = true //下拉显示分类栏
					this.scrollY = y
				}
				if (y > 500) {
					this.isShowButt = false //隐藏按钮
				} else {
					this.isShowButt = true //显示按钮
					return
				}

			},
		}
	}
</script>

<style>
	.list {
		border: 0;
		border-color: #eeeeee;
		background-color: #eeeeee;
	}

	.top-box {
		width: 750px;
		height: 45px;
		background-color: #eeeeee;
		padding-top: 7px;
	}

	.tab-bar-item {
		width: 150px;
		height: 100px;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}

	.tab-bar-title {
		height: 100px;
		line-height: 100px;
		font-size: 30px;
		color: #555;
	}

	.active {
		color: #007AFF;
	}

	.loadmore {
		height: 70px;
		width: 750px;
		flex-direction: column;
		justify-content: center;
	}

	.loadmore-text {
		font-size: 30px;
		text-align: center;
		color: #999999;
	}

	.refresh {
		width: 750px;
		height: 90px;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		background-color: #eeeeee;
	}

	.refresh-text {
		text-align: center;
		font-size: 28px;
		color: #999999;
	}

	.indicator {
		margin-top: 12px;
		height: 50px;
		width: 50px;
		color: #ea5455;
		position: absolute;
		bottom: 0px;
		z-index: 999;
	}

	.create-icon {
		width: 100px;
		height: 100px;
		background-color: #FFFFFF;
		border-radius: 50px;
		padding: 25px;
		box-sizing: border-box;
		position: fixed;
		bottom: 60px;
		right: 60px;
		box-shadow: 0 3px 4px 0 #707070;
	}
</style>
